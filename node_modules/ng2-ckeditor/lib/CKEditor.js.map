{"version":3,"sources":["CKEditor.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBa,sCANZ,qBAAU;AACP,cAAU,UAAV;AACA,uGAFO;CAAV,WAKA,QAAQ,QAAR,CAAiB,YAAjB,EAA+B,CAAC,IAAD,EAAO,CAAC,4BAAD,CAAP,CAA/B,WAGI,4BACA,4BAEA,6BACA,qBAAU,MAAV,WACA,qBAAU,QAAV;;;;;;AAYD,aAnBS,QAmBT,CAAY,UAAZ,EAAmC,SAAnC,EAAuD;8BAnB9C,UAmB8C;;;;;;;;;;;;aAVvD,QAAQ,GAU+C;aATvD,WAAW,KAS4C;aARvD,2BAQuD;aALvD,2BAKuD;;AACnD,YAAI,SAAJ,EAAe;AACX,sBAAU,aAAV,GAA0B,IAA1B,CADW;AAEX,iBAAK,SAAL,GAAiB,SAAjB,CAFW;SAAf;KADJ;;;;;;;;iBAnBS;;sCA6BI;AACT,gBAAI,KAAK,QAAL,EAAgB;AAChB,qBAAK,QAAL,CAAc,kBAAd,GADgB;AAEhB,qBAAK,QAAL,CAAc,OAAd,GAFgB;AAGhB,qBAAK,QAAL,GAAgB,IAAhB,CAHgB;aAApB;;;;;;;;;0CAUa;;;;AAEb,gBAAI,SAAS,EAAT;;;AAFS,gBAKT,KAAK,UAAL,EAAiB;;AAEjB,oBAAI,UAAU,OAAO,MAAP,EAAe;AACzB,2BAAO,MAAP,CAAc,KAAK,UAAL,CAAd,CACK,IADL,CACU,UAAC,GAAD,EAAS;AACX,8BAAK,YAAL,CAAmB,IAAI,MAAJ,CAAnB,CADW;qBAAT,CADV,CADyB;iBAA7B;;;AAFiB,aAArB,MAUK;AACD,6BAAS,KAAK,MAAL,IAAe,EAAf,CADR;AAED,yBAAK,YAAL,CAAmB,MAAnB,EAFC;iBAVL;;;;;;;;;qCAmBU,QAAQ;;;;AAElB,iBAAK,QAAL,GAAgB,SAAS,OAAT,CAAkB,KAAK,IAAL,CAAU,WAAV,CAAsB,aAAtB,EAAqC,MAAvD,CAAhB;;;AAFkB,gBAKlB,CAAK,SAAL,GAAiB,KAAK,MAAL,CAAY,WAAZ,CAAwB,aAAxB,CALC;AAMlB,iBAAK,SAAL,CAAe,KAAf,CAAqB,OAArB,GAA+B,MAA/B;;;AANkB,gBASlB,CAAK,QAAL,CAAc,OAAd,CAAsB,KAAK,KAAL,CAAtB;;;AATkB,gBAYlB,CAAK,QAAL,CAAc,EAAd,CAAiB,QAAjB,EAA2B,YAAM;AAC7B,oBAAI,QAAQ,OAAK,QAAL,CAAc,OAAd,EAAR;;;;;;;;AADyB,sBAS7B,CAAK,SAAL,CAAe,aAAf,CAA6B,IAAI,KAAJ,CAAU,OAAV,CAA7B,EAT6B;aAAN,CAA3B,CAZkB;;;;;;;;;qCA4BV;AACR,gBAAI,KAAK,QAAL,EAAe;AACf,oBAAI,QAAQ,KAAK,QAAL,CAAc,OAAd,EAAR,CADW;AAEf,qBAAK,SAAL,CAAe,iBAAf,CAAiC,KAAjC;;AAFe,oBAIf,CAAK,MAAL,CAAY,IAAZ,CAAkB,KAAlB,EAJe;aAAnB;;;;;;;;;mCAWO,OAAM;AACb,iBAAK,KAAL,GAAa,KAAb,CADa;AAEb,gBAAI,KAAK,QAAL,EACA,KAAK,QAAL,CAAc,OAAd,CAAsB,KAAtB,EADJ;;;;iCAGK,GAAE;;;oCACA;;;yCACM,IAAG;AAAC,iBAAK,QAAL,GAAgB,EAAhB,CAAD;;;;0CACF,IAAG;AAAC,iBAAK,SAAL,GAAiB,EAAjB,CAAD;;;;WAhHZ;;;;oBAEA;;;;;oBACA;;;;;eAEU;;;;;oBACA;;;;;oBACE;;;mFAPZ","file":"CKEditor.js","sourcesContent":["// Imports\nimport {\n    Component,\n    Directive,\n    Input,\n    Output,\n    ElementRef,\n    ViewChild,\n    Optional,\n    OptionalMetadata,\n    EventEmitter\n} from 'angular2/core';\nimport {NgControl, ControlValueAccessor} from 'angular2/common';\n\n/**\n * CKEditor component\n * Usage :\n * <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" configFile=\"file.js\"></ckeditor>\n */\n@Component({\n    selector: 'ckeditor',\n    template: `<textarea #host></textarea>\n    <button (click)=\"hackUpdate($event)\" #button></button>`,\n})\n@Reflect.metadata('parameters', [null, [new OptionalMetadata()]])\nexport class CKEditor {\n\n    @Input() config;\n    @Input() configFile;\n\n    @Output() change = new EventEmitter();\n    @ViewChild('host') host;\n    @ViewChild('button') button;\n\n    value = '';\n    instance = null;\n    ngControl;\n\n    // Hack button\n    _buttonEl;\n\n    /**\n     * Constructor\n     */\n    constructor(elementRef:ElementRef, ngControl:NgControl){\n        if( ngControl ){\n            ngControl.valueAccessor = this;\n            this.ngControl = ngControl;\n        }\n    }\n\n    /**\n     * On component destroy\n     */\n    ngOnDestroy(){\n        if( this.instance ) {\n            this.instance.removeAllListeners();\n            this.instance.destroy();\n            this.instance = null;\n        }\n    }\n\n    /**\n     * On component view init\n     */\n    ngAfterViewInit(){\n        // Configuration\n        var config = {};\n\n        // Fetch file\n        if( this.configFile ){\n\n            if( System && System.import ){\n                System.import(this.configFile)\n                    .then((res) => {\n                        this.ckeditorInit( res.config );\n                    })\n            }\n\n        // Config object\n        }else{\n            config = this.config || {};\n            this.ckeditorInit( config );\n        }\n    }\n\n    /**\n     * CKEditor init\n     */\n    ckeditorInit( config ){\n        // CKEditor replace textarea\n        this.instance = CKEDITOR.replace( this.host._appElement.nativeElement, config );\n\n        // Hide hack button\n        this._buttonEl = this.button._appElement.nativeElement;\n        this._buttonEl.style.display = 'none';\n\n        // Set initial value\n        this.instance.setData(this.value);\n\n        // Change event\n        this.instance.on('change', () => {\n            var value = this.instance.getData();\n\n            // This doesn't work ???\n            /*this.onChange( value );\n            this.change.emit( value );\n            this.ngControl.viewToModelUpdate(value);*/\n\n            // Hack\n            this._buttonEl.dispatchEvent(new Event('click'))\n        });\n    }\n\n    /**\n     * Hack to update model\n     */\n    hackUpdate(){\n        if( this.instance ){\n            var value = this.instance.getData();\n            this.ngControl.viewToModelUpdate(value);\n            //this.onChange( value );\n            this.change.emit( value );\n        }\n    }\n\n    /**\n     * Implements ControlValueAccessor\n     */\n    writeValue(value){\n        this.value = value;\n        if( this.instance )\n            this.instance.setData(value);\n    }\n    onChange(_){}\n    onTouched(){}\n    registerOnChange(fn){this.onChange = fn;}\n    registerOnTouched(fn){this.onTouched = fn;}\n}\n"],"sourceRoot":"/source/"}